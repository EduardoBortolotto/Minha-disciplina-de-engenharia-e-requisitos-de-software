Software:
Um software é um conjunto de instruções, dados e programas que orientam um computador ou dispositivo eletrônico sobre como realizar tarefas específicas. Diferente do hardware, que é a parte física de um dispositivo, o software refere-se aos componentes intangíveis que permitem ao hardware executar funções e interagir com o usuário.

Software de sistema:
Inclui o sistema operacional (como Windows, macOS ou Linux), que gerencia o hardware e permite que outros programas funcionem corretamente.

Software de aplicativo:
Refere-se a programas que são criados para realizar tarefas específicas, como navegadores de internet, editores de texto, jogos ou softwares de design gráfico.

Aplicação Web: 
Uma aplicação web é um software ou programa que roda em um navegador de internet, como o Google Chrome, Mozilla Firefox ou Safari, e não precisa ser instalado no computador do usuário.

Software legado:
Programas ou sistemas antigos que ainda estão em operação, mas que já são obsoletos ou desatualizados em relação às tecnologias mais recentes.

Engenharia de Software:
Engenharia de software é o estabelecimento e o emprego de sólidos princípios de engenharia de modo a obter software de maneira econômica, que seja confiável e funcione de forma eficiente em máquinas reais.

U.M.L:
Unified Modeling Language (Linguagem de Modelagem Unificada). É uma linguagem de modelagem padrão usada principalmente no desenvolvimento de software para representar, especificar, visualizar, construir e documentar os componentes de um sistema.

SaaS:
SaaS (Software as a Service) é um modelo de entrega de software onde as aplicações são fornecidas pela internet como um serviço. Ou seja, ao invés de comprar, instalar e manter um software em um servidor local ou computador, o usuário acessa o software diretamente de um provedor via internet, normalmente por meio de um navegador web.

Modelos de Processo:
Os modelos de processo de software são abordagens estruturadas para o desenvolvimento de software. Eles definem atividades, etapas e práticas para garantir a criação de um software eficiente e de qualidade.

Modelos Tradicionais(Pesados):
Os modelos tradicionais seguem um planejamento rigoroso e estruturado, com fases bem definidas.
Principais modelos:
-Cascata (Waterfall): Processo sequencial (requisitos → design → implementação → testes → manutenção).
-V-Model: Extensão do Cascata, com foco maior em testes.
-Espiral: Desenvolvimento iterativo com análise contínua de riscos.
-Incremental: O software é entregue em partes (incrementos), facilitando ajustes.
Vantagens: Bem documentado, previsível, bom para projetos com requisitos fixos.
Desvantagens: Pouca flexibilidade, difícil adaptação a mudanças.

Modelos Ágeis(Leves):
Os modelos ágeis são mais flexíveis e iterativos, permitindo mudanças frequentes com entregas contínuas.
Principais modelos:
-Scrum: Trabalho em ciclos curtos (sprints) e colaboração intensa.
-Kanban: Fluxo contínuo de tarefas organizado em um quadro visual.
-Extreme Programming (XP): Foco na qualidade do código com práticas como programação em pares e testes automatizados.
Vantagens: Adaptável, entregas rápidas, feedback contínuo.
Desvantagens: Pode ser difícil gerenciar grandes equipes, exige envolvimento constante do cliente.
